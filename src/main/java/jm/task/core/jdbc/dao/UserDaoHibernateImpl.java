package jm.task.core.jdbc.dao;
import jm.task.core.jdbc.model.User;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import java.util.List;

public class UserDaoHibernateImpl implements UserDao {
    Configuration configuration = new Configuration().addAnnotatedClass(User.class);
    SessionFactory sessionFactory = configuration.buildSessionFactory();
    public UserDaoHibernateImpl() {

    }


    @Override
    public void createUsersTable() {
        String createTable = """
                CREATE TABLE IF NOT EXISTS users (
                id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                age SMALLINT CHECK (age >0 AND age < 128));
                """;
        try (Session session = sessionFactory.getCurrentSession()){
            session.beginTransaction();
            session.createNativeQuery(createTable).executeUpdate();
            session.getTransaction().commit();
        }
    }

    @Override
    public void dropUsersTable() {
        String cleanTable = """
                TRUNCATE TABLE users;                
                ALTER SEQUENCE users_id_seq RESTART WITH 1;
                UPDATE users SET id=nextval('users_id_seq');
                """;
        try (Session session = sessionFactory.getCurrentSession()){
            session.beginTransaction();
            session.createNativeQuery(cleanTable).executeUpdate();
            session.getTransaction().commit();
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        User user = new User(name, lastName, age);

        try (Session session = sessionFactory.getCurrentSession()){
            session.beginTransaction();
            session.save(user);
            session.getTransaction().commit();
            System.out.printf("User с именем – %S добавлен в базу данных \n", name);
        }
    }

    @Override
    public void removeUserById(long id) {
        try (Session session = sessionFactory.getCurrentSession()){
            session.beginTransaction();
            User user = session.get(User.class, id);
            session.delete(user);
            session.getTransaction().commit();
        }
    }

    @Override
    public List<User> getAllUsers() {
        List<User> usersList;
        try (Session session = sessionFactory.getCurrentSession()){
            session.beginTransaction();
            usersList = session.createQuery("FROM User").getResultList();
            session.getTransaction().commit();
        }
        return usersList;
    }

    @Override
    public void cleanUsersTable() {
        try (Session session = sessionFactory.getCurrentSession()){
            session.beginTransaction();
            session.createQuery("DELETE FROM User").executeUpdate();
            session.getTransaction().commit();
        }
    }
}
